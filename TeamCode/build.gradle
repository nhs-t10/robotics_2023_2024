//
// build.gradle in TeamCode
//
// Most of the definitions for building your module reside in a common, shared
// file 'build.common.gradle'. Being factored in this way makes it easier to
// integrate updates to the FTC into your code. If you really need to customize
// the build definitions, you can place those customizations in this file, but
// please think carefully as to whether such customizations are really necessary
// before doing so.


// Custom definitions may go here

// Include common definitions from above.
apply from: '../build.common.gradle'
apply from: '../build.dependencies.gradle'

android {
    namespace = 'org.firstinspires.ftc.teamcode'

    packagingOptions {
        jniLibs.useLegacyPackaging true
    }
}

dependencies {
    implementation 'org.openftc:apriltag:2.0.0'
    implementation project(':FtcRobotController')
    annotationProcessor files('lib/OpModeAnnotationProcessor.jar')
}

// Set version
String executeCommand(String... args) {
    def os = new ByteArrayOutputStream();

    exec {
        commandLine = args
        standardOutput = os
    }

    return os.toString().trim()
}

String getLatestGitHash() { return executeCommand('git', 'rev-parse', '--short', 'HEAD') }
int getGitCommitCount() { return executeCommand('git', 'log', '--oneline').count("\n") }
String getGitBranch() { return executeCommand('git', 'rev-parse', '--abbrev-ref', 'HEAD') }
String getTime() { return System.currentTimeMillis().toString().substring(4, 10) }

version "3.${getGitCommitCount()}, Build ${getTime()} (Commit ${getLatestGitHash()}@${getGitBranch()})"

android.applicationVariants.configureEach { v ->
    tasks.create("javadoc${v.name.capitalize()}", Javadoc) {
        group 'javadoc'

        destinationDir = file("javadocs-${v.name}")

        source = v.javaCompile.source.findAll {
            it.getAbsolutePath().contains("robobase") || it.getAbsolutePath().contains("centerstage") || it.getAbsolutePath().contains("roadrunner")
        }

        afterEvaluate {
            classpath = files(v.javaCompile.classpath.files) + files("${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar")
        }
    }
}

file('./src/main/java/BuildProperties.java').write("""// WARNING:
// [!!] This file is automatically generated. Modifications to this file will NOT be SAVED! [!!]

/**
 * Build properties generated at compile-time.
 */
public class BuildProperties {
    /**
     * The version of the software
     */
    public static final String VERSION = "${version}";
}
""")
